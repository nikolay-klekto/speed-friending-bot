/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables.records


import by.sf.bot.jooq.tables.Events

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventsRecord() : UpdatableRecordImpl<EventsRecord>(Events.EVENTS), Record4<Int?, LocalDate?, String?, LocalDate?> {

    var eventId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var eventDate: LocalDate?
        set(value): Unit = set(1, value)
        get(): LocalDate? = get(1) as LocalDate?

    var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var dateCreated: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, LocalDate?, String?, LocalDate?> = super.fieldsRow() as Row4<Int?, LocalDate?, String?, LocalDate?>
    override fun valuesRow(): Row4<Int?, LocalDate?, String?, LocalDate?> = super.valuesRow() as Row4<Int?, LocalDate?, String?, LocalDate?>
    override fun field1(): Field<Int?> = Events.EVENTS.EVENT_ID
    override fun field2(): Field<LocalDate?> = Events.EVENTS.EVENT_DATE
    override fun field3(): Field<String?> = Events.EVENTS.DESCRIPTION
    override fun field4(): Field<LocalDate?> = Events.EVENTS.DATE_CREATED
    override fun component1(): Int? = eventId
    override fun component2(): LocalDate? = eventDate
    override fun component3(): String? = description
    override fun component4(): LocalDate? = dateCreated
    override fun value1(): Int? = eventId
    override fun value2(): LocalDate? = eventDate
    override fun value3(): String? = description
    override fun value4(): LocalDate? = dateCreated

    override fun value1(value: Int?): EventsRecord {
        this.eventId = value
        return this
    }

    override fun value2(value: LocalDate?): EventsRecord {
        this.eventDate = value
        return this
    }

    override fun value3(value: String?): EventsRecord {
        this.description = value
        return this
    }

    override fun value4(value: LocalDate?): EventsRecord {
        this.dateCreated = value
        return this
    }

    override fun values(value1: Int?, value2: LocalDate?, value3: String?, value4: LocalDate?): EventsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised EventsRecord
     */
    constructor(eventId: Int? = null, eventDate: LocalDate? = null, description: String? = null, dateCreated: LocalDate? = null): this() {
        this.eventId = eventId
        this.eventDate = eventDate
        this.description = description
        this.dateCreated = dateCreated
    }

    /**
     * Create a detached, initialised EventsRecord
     */
    constructor(value: by.sf.bot.jooq.tables.pojos.Events?): this() {
        if (value != null) {
            this.eventId = value.eventId
            this.eventDate = value.eventDate
            this.description = value.description
            this.dateCreated = value.dateCreated
        }
    }
}
