/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables


import by.sf.bot.jooq.Public
import by.sf.bot.jooq.keys.MAIN_BOT_INFO_PKEY
import by.sf.bot.jooq.tables.records.MainBotInfoRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MainBotInfo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, MainBotInfoRecord>?,
    aliased: Table<MainBotInfoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<MainBotInfoRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.main_bot_info</code>
         */
        val MAIN_BOT_INFO: MainBotInfo = MainBotInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MainBotInfoRecord> = MainBotInfoRecord::class.java

    /**
     * The column <code>public.main_bot_info.id_info</code>.
     */
    val ID_INFO: TableField<MainBotInfoRecord, Int?> = createField(DSL.name("id_info"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.main_bot_info.key</code>.
     */
    val KEY: TableField<MainBotInfoRecord, String?> = createField(DSL.name("key"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.main_bot_info.value</code>.
     */
    val VALUE: TableField<MainBotInfoRecord, String?> = createField(DSL.name("value"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<MainBotInfoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<MainBotInfoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.main_bot_info</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.main_bot_info</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.main_bot_info</code> table reference
     */
    constructor(): this(DSL.name("main_bot_info"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, MainBotInfoRecord>): this(Internal.createPathAlias(child, key), child, key, MAIN_BOT_INFO, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<MainBotInfoRecord, Int?> = super.getIdentity() as Identity<MainBotInfoRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<MainBotInfoRecord> = MAIN_BOT_INFO_PKEY
    override fun `as`(alias: String): MainBotInfo = MainBotInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): MainBotInfo = MainBotInfo(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): MainBotInfo = MainBotInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): MainBotInfo = MainBotInfo(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
}
