/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables


import by.sf.bot.jooq.Public
import by.sf.bot.jooq.keys.RANDOM_COFFEE_AGE_PKEY
import by.sf.bot.jooq.keys.RANDOM_COFFEE_AGE__RANDOM_COFFEE_AGE_AGE_ID_FKEY
import by.sf.bot.jooq.keys.RANDOM_COFFEE_AGE__RANDOM_COFFEE_AGE_RANDOM_COFFEE_ID_FKEY
import by.sf.bot.jooq.tables.records.RandomCoffeeAgeRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RandomCoffeeAge(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RandomCoffeeAgeRecord>?,
    aliased: Table<RandomCoffeeAgeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RandomCoffeeAgeRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.random_coffee_age</code>
         */
        val RANDOM_COFFEE_AGE: RandomCoffeeAge = RandomCoffeeAge()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RandomCoffeeAgeRecord> = RandomCoffeeAgeRecord::class.java

    /**
     * The column <code>public.random_coffee_age.random_coffee_id</code>.
     */
    val RANDOM_COFFEE_ID: TableField<RandomCoffeeAgeRecord, Int?> = createField(DSL.name("random_coffee_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.random_coffee_age.age_id</code>.
     */
    val AGE_ID: TableField<RandomCoffeeAgeRecord, Int?> = createField(DSL.name("age_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RandomCoffeeAgeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RandomCoffeeAgeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.random_coffee_age</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.random_coffee_age</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.random_coffee_age</code> table reference
     */
    constructor(): this(DSL.name("random_coffee_age"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RandomCoffeeAgeRecord>): this(Internal.createPathAlias(child, key), child, key, RANDOM_COFFEE_AGE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<RandomCoffeeAgeRecord> = RANDOM_COFFEE_AGE_PKEY
    override fun getReferences(): List<ForeignKey<RandomCoffeeAgeRecord, *>> = listOf(RANDOM_COFFEE_AGE__RANDOM_COFFEE_AGE_RANDOM_COFFEE_ID_FKEY, RANDOM_COFFEE_AGE__RANDOM_COFFEE_AGE_AGE_ID_FKEY)

    private lateinit var _randomCoffee: RandomCoffee
    private lateinit var _ages: Ages

    /**
     * Get the implicit join path to the <code>public.random_coffee</code>
     * table.
     */
    fun randomCoffee(): RandomCoffee {
        if (!this::_randomCoffee.isInitialized)
            _randomCoffee = RandomCoffee(this, RANDOM_COFFEE_AGE__RANDOM_COFFEE_AGE_RANDOM_COFFEE_ID_FKEY)

        return _randomCoffee;
    }

    /**
     * Get the implicit join path to the <code>public.ages</code> table.
     */
    fun ages(): Ages {
        if (!this::_ages.isInitialized)
            _ages = Ages(this, RANDOM_COFFEE_AGE__RANDOM_COFFEE_AGE_AGE_ID_FKEY)

        return _ages;
    }
    override fun `as`(alias: String): RandomCoffeeAge = RandomCoffeeAge(DSL.name(alias), this)
    override fun `as`(alias: Name): RandomCoffeeAge = RandomCoffeeAge(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RandomCoffeeAge = RandomCoffeeAge(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RandomCoffeeAge = RandomCoffeeAge(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Int?, Int?> = super.fieldsRow() as Row2<Int?, Int?>
}
