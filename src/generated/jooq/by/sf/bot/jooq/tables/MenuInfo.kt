/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables


import by.sf.bot.jooq.Public
import by.sf.bot.jooq.keys.MENU_INFO_PKEY
import by.sf.bot.jooq.keys.MENU_INFO__MENU_INFO_PARENT_ID_FKEY
import by.sf.bot.jooq.tables.records.MenuInfoRecord

import java.time.LocalDate

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Таблица для хранения информации о меню
 */
@Suppress("UNCHECKED_CAST")
open class MenuInfo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, MenuInfoRecord>?,
    aliased: Table<MenuInfoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<MenuInfoRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Таблица для хранения информации о меню"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.menu_info</code>
         */
        val MENU_INFO: MenuInfo = MenuInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MenuInfoRecord> = MenuInfoRecord::class.java

    /**
     * The column <code>public.menu_info.menu_id</code>. Уникальный
     * идентификатор меню
     */
    val MENU_ID: TableField<MenuInfoRecord, Int?> = createField(DSL.name("menu_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Уникальный идентификатор меню")

    /**
     * The column <code>public.menu_info.description</code>. Описание меню
     */
    val DESCRIPTION: TableField<MenuInfoRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "Описание меню")

    /**
     * The column <code>public.menu_info.parent_id</code>. Идентификатор
     * родительского меню
     */
    val PARENT_ID: TableField<MenuInfoRecord, Int?> = createField(DSL.name("parent_id"), SQLDataType.INTEGER, this, "Идентификатор родительского меню")

    /**
     * The column <code>public.menu_info.date_created</code>. Дата создания
     * записи
     */
    val DATE_CREATED: TableField<MenuInfoRecord, LocalDate?> = createField(DSL.name("date_created"), SQLDataType.LOCALDATE, this, "Дата создания записи")

    private constructor(alias: Name, aliased: Table<MenuInfoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<MenuInfoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.menu_info</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.menu_info</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.menu_info</code> table reference
     */
    constructor(): this(DSL.name("menu_info"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, MenuInfoRecord>): this(Internal.createPathAlias(child, key), child, key, MENU_INFO, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<MenuInfoRecord, Int?> = super.getIdentity() as Identity<MenuInfoRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<MenuInfoRecord> = MENU_INFO_PKEY
    override fun getReferences(): List<ForeignKey<MenuInfoRecord, *>> = listOf(MENU_INFO__MENU_INFO_PARENT_ID_FKEY)

    private lateinit var _menuInfo: MenuInfo

    /**
     * Get the implicit join path to the <code>public.menu_info</code> table.
     */
    fun menuInfo(): MenuInfo {
        if (!this::_menuInfo.isInitialized)
            _menuInfo = MenuInfo(this, MENU_INFO__MENU_INFO_PARENT_ID_FKEY)

        return _menuInfo;
    }
    override fun `as`(alias: String): MenuInfo = MenuInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): MenuInfo = MenuInfo(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): MenuInfo = MenuInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): MenuInfo = MenuInfo(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, String?, Int?, LocalDate?> = super.fieldsRow() as Row4<Int?, String?, Int?, LocalDate?>
}
