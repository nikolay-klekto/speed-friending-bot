/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables


import by.sf.bot.jooq.Public
import by.sf.bot.jooq.keys.USERS_PKEY
import by.sf.bot.jooq.tables.records.UsersRecord

import java.time.LocalDate

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Таблица для хранения информации о пользователях
 */
@Suppress("UNCHECKED_CAST")
open class Users(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersRecord>?,
    aliased: Table<UsersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Таблица для хранения информации о пользователях"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.users</code>
         */
        val USERS: Users = Users()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersRecord> = UsersRecord::class.java

    /**
     * The column <code>public.users.user_id</code>. Уникальный идентификатор
     * пользователя
     */
    val USER_ID: TableField<UsersRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Уникальный идентификатор пользователя")

    /**
     * The column <code>public.users.telegram_id</code>. Идентификатор
     * пользователя в Telegram
     */
    val TELEGRAM_ID: TableField<UsersRecord, Long?> = createField(DSL.name("telegram_id"), SQLDataType.BIGINT, this, "Идентификатор пользователя в Telegram")

    /**
     * The column <code>public.users.username</code>. Имя пользователя в
     * Telegram
     */
    val USERNAME: TableField<UsersRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR, this, "Имя пользователя в Telegram")

    /**
     * The column <code>public.users.date_created</code>. Дата создания записи
     */
    val DATE_CREATED: TableField<UsersRecord, LocalDate?> = createField(DSL.name("date_created"), SQLDataType.LOCALDATE, this, "Дата создания записи")

    /**
     * The column <code>public.users.reminders</code>. Статус напоминания (true
     * - активен, false - неактивен)
     */
    val REMINDERS: TableField<UsersRecord, String?> = createField(DSL.name("reminders"), SQLDataType.VARCHAR, this, "Статус напоминания (true - активен, false - неактивен)")

    private constructor(alias: Name, aliased: Table<UsersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.users</code> table reference
     */
    constructor(): this(DSL.name("users"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersRecord>): this(Internal.createPathAlias(child, key), child, key, USERS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<UsersRecord, Int?> = super.getIdentity() as Identity<UsersRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UsersRecord> = USERS_PKEY
    override fun `as`(alias: String): Users = Users(DSL.name(alias), this)
    override fun `as`(alias: Name): Users = Users(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Users = Users(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Users = Users(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Int?, Long?, String?, LocalDate?, String?> = super.fieldsRow() as Row5<Int?, Long?, String?, LocalDate?, String?>
}
