/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables


import by.sf.bot.jooq.Public
import by.sf.bot.jooq.keys.PLACES_TO_VISIT_PKEY
import by.sf.bot.jooq.tables.records.PlacesToVisitRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlacesToVisit(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PlacesToVisitRecord>?,
    aliased: Table<PlacesToVisitRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PlacesToVisitRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.places_to_visit</code>
         */
        val PLACES_TO_VISIT: PlacesToVisit = PlacesToVisit()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlacesToVisitRecord> = PlacesToVisitRecord::class.java

    /**
     * The column <code>public.places_to_visit.place_id</code>.
     */
    val PLACE_ID: TableField<PlacesToVisitRecord, Int?> = createField(DSL.name("place_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.places_to_visit.place</code>.
     */
    val PLACE: TableField<PlacesToVisitRecord, String?> = createField(DSL.name("place"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<PlacesToVisitRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PlacesToVisitRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.places_to_visit</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.places_to_visit</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.places_to_visit</code> table reference
     */
    constructor(): this(DSL.name("places_to_visit"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PlacesToVisitRecord>): this(Internal.createPathAlias(child, key), child, key, PLACES_TO_VISIT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<PlacesToVisitRecord, Int?> = super.getIdentity() as Identity<PlacesToVisitRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlacesToVisitRecord> = PLACES_TO_VISIT_PKEY
    override fun `as`(alias: String): PlacesToVisit = PlacesToVisit(DSL.name(alias), this)
    override fun `as`(alias: Name): PlacesToVisit = PlacesToVisit(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlacesToVisit = PlacesToVisit(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlacesToVisit = PlacesToVisit(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>
}
