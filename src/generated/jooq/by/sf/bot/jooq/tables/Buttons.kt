/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables


import by.sf.bot.jooq.Public
import by.sf.bot.jooq.keys.BUTTONS_PKEY
import by.sf.bot.jooq.tables.records.ButtonsRecord

import java.time.LocalDate

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Таблица для хранения информации о кнопках меню
 */
@Suppress("UNCHECKED_CAST")
open class Buttons(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ButtonsRecord>?,
    aliased: Table<ButtonsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ButtonsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment("Таблица для хранения информации о кнопках меню"),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.buttons</code>
         */
        val BUTTONS: Buttons = Buttons()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ButtonsRecord> = ButtonsRecord::class.java

    /**
     * The column <code>public.buttons.button_id</code>. Уникальный
     * идентификатор кнопки
     */
    val BUTTON_ID: TableField<ButtonsRecord, Int?> = createField(DSL.name("button_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Уникальный идентификатор кнопки")

    /**
     * The column <code>public.buttons.menu_id</code>. Идентификатор меню, к
     * которому относится кнопка
     */
    val MENU_ID: TableField<ButtonsRecord, Int?> = createField(DSL.name("menu_id"), SQLDataType.INTEGER, this, "Идентификатор меню, к которому относится кнопка")

    /**
     * The column <code>public.buttons.label</code>. Надпись на кнопке
     */
    val LABEL: TableField<ButtonsRecord, String?> = createField(DSL.name("label"), SQLDataType.VARCHAR, this, "Надпись на кнопке")

    /**
     * The column <code>public.buttons.action_type</code>. Тип действия кнопки
     * (например, URL, команда)
     */
    val ACTION_TYPE: TableField<ButtonsRecord, String?> = createField(DSL.name("action_type"), SQLDataType.VARCHAR, this, "Тип действия кнопки (например, URL, команда)")

    /**
     * The column <code>public.buttons.action_data</code>. Данные действия
     * кнопки (например, URL или текст команды)
     */
    val ACTION_DATA: TableField<ButtonsRecord, String?> = createField(DSL.name("action_data"), SQLDataType.VARCHAR, this, "Данные действия кнопки (например, URL или текст команды)")

    /**
     * The column <code>public.buttons.date_created</code>. Дата создания записи
     */
    val DATE_CREATED: TableField<ButtonsRecord, LocalDate?> = createField(DSL.name("date_created"), SQLDataType.LOCALDATE, this, "Дата создания записи")

    /**
     * The column <code>public.buttons.position</code>.
     */
    val POSITION: TableField<ButtonsRecord, Int?> = createField(DSL.name("position"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<ButtonsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ButtonsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.buttons</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.buttons</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.buttons</code> table reference
     */
    constructor(): this(DSL.name("buttons"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ButtonsRecord>): this(Internal.createPathAlias(child, key), child, key, BUTTONS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ButtonsRecord, Int?> = super.getIdentity() as Identity<ButtonsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<ButtonsRecord> = BUTTONS_PKEY
    override fun `as`(alias: String): Buttons = Buttons(DSL.name(alias), this)
    override fun `as`(alias: Name): Buttons = Buttons(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Buttons = Buttons(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Buttons = Buttons(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Int?, Int?, String?, String?, String?, LocalDate?, Int?> = super.fieldsRow() as Row7<Int?, Int?, String?, String?, String?, LocalDate?, Int?>
}
