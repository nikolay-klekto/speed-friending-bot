/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables.records


import by.sf.bot.jooq.tables.UserMatches

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserMatchesRecord() : UpdatableRecordImpl<UserMatchesRecord>(UserMatches.USER_MATCHES), Record3<Int?, String?, String?> {

    var userId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var compatibleUsers: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var viewedUsers: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
    override fun valuesRow(): Row3<Int?, String?, String?> = super.valuesRow() as Row3<Int?, String?, String?>
    override fun field1(): Field<Int?> = UserMatches.USER_MATCHES.USER_ID
    override fun field2(): Field<String?> = UserMatches.USER_MATCHES.COMPATIBLE_USERS
    override fun field3(): Field<String?> = UserMatches.USER_MATCHES.VIEWED_USERS
    override fun component1(): Int? = userId
    override fun component2(): String? = compatibleUsers
    override fun component3(): String? = viewedUsers
    override fun value1(): Int? = userId
    override fun value2(): String? = compatibleUsers
    override fun value3(): String? = viewedUsers

    override fun value1(value: Int?): UserMatchesRecord {
        this.userId = value
        return this
    }

    override fun value2(value: String?): UserMatchesRecord {
        this.compatibleUsers = value
        return this
    }

    override fun value3(value: String?): UserMatchesRecord {
        this.viewedUsers = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?): UserMatchesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised UserMatchesRecord
     */
    constructor(userId: Int? = null, compatibleUsers: String? = null, viewedUsers: String? = null): this() {
        this.userId = userId
        this.compatibleUsers = compatibleUsers
        this.viewedUsers = viewedUsers
    }

    /**
     * Create a detached, initialised UserMatchesRecord
     */
    constructor(value: by.sf.bot.jooq.tables.pojos.UserMatches?): this() {
        if (value != null) {
            this.userId = value.userId
            this.compatibleUsers = value.compatibleUsers
            this.viewedUsers = value.viewedUsers
        }
    }
}
