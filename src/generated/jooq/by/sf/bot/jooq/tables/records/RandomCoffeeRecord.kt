/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables.records


import by.sf.bot.jooq.tables.RandomCoffee

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RandomCoffeeRecord() : UpdatableRecordImpl<RandomCoffeeRecord>(RandomCoffee.RANDOM_COFFEE), Record8<Int?, Int?, String?, String?, String?, String?, String?, LocalDate?> {

    var idNote: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var userId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    var username: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var age: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    var occupation: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    var hobby: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    var wouldLikeToVisit: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    var dateCreated: LocalDate?
        set(value): Unit = set(7, value)
        get(): LocalDate? = get(7) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, Int?, String?, String?, String?, String?, String?, LocalDate?> = super.fieldsRow() as Row8<Int?, Int?, String?, String?, String?, String?, String?, LocalDate?>
    override fun valuesRow(): Row8<Int?, Int?, String?, String?, String?, String?, String?, LocalDate?> = super.valuesRow() as Row8<Int?, Int?, String?, String?, String?, String?, String?, LocalDate?>
    override fun field1(): Field<Int?> = RandomCoffee.RANDOM_COFFEE.ID_NOTE
    override fun field2(): Field<Int?> = RandomCoffee.RANDOM_COFFEE.USER_ID
    override fun field3(): Field<String?> = RandomCoffee.RANDOM_COFFEE.USERNAME
    override fun field4(): Field<String?> = RandomCoffee.RANDOM_COFFEE.AGE
    override fun field5(): Field<String?> = RandomCoffee.RANDOM_COFFEE.OCCUPATION
    override fun field6(): Field<String?> = RandomCoffee.RANDOM_COFFEE.HOBBY
    override fun field7(): Field<String?> = RandomCoffee.RANDOM_COFFEE.WOULD_LIKE_TO_VISIT
    override fun field8(): Field<LocalDate?> = RandomCoffee.RANDOM_COFFEE.DATE_CREATED
    override fun component1(): Int? = idNote
    override fun component2(): Int? = userId
    override fun component3(): String? = username
    override fun component4(): String? = age
    override fun component5(): String? = occupation
    override fun component6(): String? = hobby
    override fun component7(): String? = wouldLikeToVisit
    override fun component8(): LocalDate? = dateCreated
    override fun value1(): Int? = idNote
    override fun value2(): Int? = userId
    override fun value3(): String? = username
    override fun value4(): String? = age
    override fun value5(): String? = occupation
    override fun value6(): String? = hobby
    override fun value7(): String? = wouldLikeToVisit
    override fun value8(): LocalDate? = dateCreated

    override fun value1(value: Int?): RandomCoffeeRecord {
        this.idNote = value
        return this
    }

    override fun value2(value: Int?): RandomCoffeeRecord {
        this.userId = value
        return this
    }

    override fun value3(value: String?): RandomCoffeeRecord {
        this.username = value
        return this
    }

    override fun value4(value: String?): RandomCoffeeRecord {
        this.age = value
        return this
    }

    override fun value5(value: String?): RandomCoffeeRecord {
        this.occupation = value
        return this
    }

    override fun value6(value: String?): RandomCoffeeRecord {
        this.hobby = value
        return this
    }

    override fun value7(value: String?): RandomCoffeeRecord {
        this.wouldLikeToVisit = value
        return this
    }

    override fun value8(value: LocalDate?): RandomCoffeeRecord {
        this.dateCreated = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?, value4: String?, value5: String?, value6: String?, value7: String?, value8: LocalDate?): RandomCoffeeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised RandomCoffeeRecord
     */
    constructor(idNote: Int? = null, userId: Int? = null, username: String? = null, age: String? = null, occupation: String? = null, hobby: String? = null, wouldLikeToVisit: String? = null, dateCreated: LocalDate? = null): this() {
        this.idNote = idNote
        this.userId = userId
        this.username = username
        this.age = age
        this.occupation = occupation
        this.hobby = hobby
        this.wouldLikeToVisit = wouldLikeToVisit
        this.dateCreated = dateCreated
    }

    /**
     * Create a detached, initialised RandomCoffeeRecord
     */
    constructor(value: by.sf.bot.jooq.tables.pojos.RandomCoffee?): this() {
        if (value != null) {
            this.idNote = value.idNote
            this.userId = value.userId
            this.username = value.username
            this.age = value.age
            this.occupation = value.occupation
            this.hobby = value.hobby
            this.wouldLikeToVisit = value.wouldLikeToVisit
            this.dateCreated = value.dateCreated
        }
    }
}
