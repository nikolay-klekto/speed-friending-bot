/*
 * This file is generated by jOOQ.
 */
package by.sf.bot.jooq.tables.records


import by.sf.bot.jooq.tables.RandomCoffee

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * Таблица для хранения информации об участниках Random Coffee
 */
@Suppress("UNCHECKED_CAST")
open class RandomCoffeeRecord() : UpdatableRecordImpl<RandomCoffeeRecord>(RandomCoffee.RANDOM_COFFEE), Record4<Int?, Int?, String?, LocalDate?> {

    var idNote: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var userId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    var interests: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var dateCreated: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, Int?, String?, LocalDate?> = super.fieldsRow() as Row4<Int?, Int?, String?, LocalDate?>
    override fun valuesRow(): Row4<Int?, Int?, String?, LocalDate?> = super.valuesRow() as Row4<Int?, Int?, String?, LocalDate?>
    override fun field1(): Field<Int?> = RandomCoffee.RANDOM_COFFEE.ID_NOTE
    override fun field2(): Field<Int?> = RandomCoffee.RANDOM_COFFEE.USER_ID
    override fun field3(): Field<String?> = RandomCoffee.RANDOM_COFFEE.INTERESTS
    override fun field4(): Field<LocalDate?> = RandomCoffee.RANDOM_COFFEE.DATE_CREATED
    override fun component1(): Int? = idNote
    override fun component2(): Int? = userId
    override fun component3(): String? = interests
    override fun component4(): LocalDate? = dateCreated
    override fun value1(): Int? = idNote
    override fun value2(): Int? = userId
    override fun value3(): String? = interests
    override fun value4(): LocalDate? = dateCreated

    override fun value1(value: Int?): RandomCoffeeRecord {
        this.idNote = value
        return this
    }

    override fun value2(value: Int?): RandomCoffeeRecord {
        this.userId = value
        return this
    }

    override fun value3(value: String?): RandomCoffeeRecord {
        this.interests = value
        return this
    }

    override fun value4(value: LocalDate?): RandomCoffeeRecord {
        this.dateCreated = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?, value4: LocalDate?): RandomCoffeeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised RandomCoffeeRecord
     */
    constructor(idNote: Int? = null, userId: Int? = null, interests: String? = null, dateCreated: LocalDate? = null): this() {
        this.idNote = idNote
        this.userId = userId
        this.interests = interests
        this.dateCreated = dateCreated
    }

    /**
     * Create a detached, initialised RandomCoffeeRecord
     */
    constructor(value: by.sf.bot.jooq.tables.pojos.RandomCoffee?): this() {
        if (value != null) {
            this.idNote = value.idNote
            this.userId = value.userId
            this.interests = value.interests
            this.dateCreated = value.dateCreated
        }
    }
}
