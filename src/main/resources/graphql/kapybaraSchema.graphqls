type Query{
    getMenuInfoById(menuId: ID!): MenuInfoModel

    getMainBotInfoByKey(key: String!): MainBotInfoModel

    getButtonsByMenuId(menuId: ID): [ButtonModel]
}

type Mutation {
    addMainBotInfo(mainBotInfo: MainBotInfoInput!): MainBotInfoModel

    addMenuInfo(menuInfo: MenuInfoInput!): MenuInfoModel
    updateMenuInfo(title: String!, menuInfo: MenuInfoInput!): Boolean
    deleteMenuInfoById(menuId: ID): Boolean

    addButton(button: ButtonInput!): ButtonModel
    updateButton(menuId: ID!, label: String!, button: ButtonInput!): Boolean
    deleteButton(menuId: ID!, label: String!): Boolean

    addRemindDate(remindDate: RemindDatesInput!): RemindDatesModel

    addEvent(eventModel: EventsInput!): EventsModel
    deleteEvent(eventId: Int!): Boolean

}

type MenuInfoModel {
    menuId: Int
    description: String
    parentId: Int
    dateCreated: String
}

type MainBotInfoModel{
    idInfo: Int
    key: String
    value: String
}

type ButtonModel{
    buttonId: Int
    menuId: Int
    label: String
    actionType: String
    actionData: String
    dateCreated: String
    position: Int
}

type RemindDatesModel{
    id: Int
    description: String
    eventId: ID
    remindDate: String
    dateCreated: String
}

type EventsModel {
    eventId: Int
    eventDate: String
    description: String
    dateCreated: String
}

input MainBotInfoInput{
    idInfo: Int
    key: String
    value: String
}

input MenuInfoInput{
    menuId: Int
    description: String
    parentId: Int
}

input ButtonInput{
    buttonId: Int
    menuId: Int
    label: String
    actionType: String
    actionData: String
    position: Int
}

input RemindDatesInput{
    id: Int
    description: String
    eventId: ID
    remindDate: String
}

input EventsInput {
    eventId: Int
    eventDate: String
    description: String
    dateCreated: String
}