type Query{
    getMenuInfoById(menuId: ID!): MenuInfoModel

    getMainBotInfoByKey(key: String!): MainBotInfoModel

    getButtonsByMenuId(menuId: ID): [ButtonModel]

    getAllRandomCoffeeAccounts:[RandomCoffeeModel]

    getAllEvents:[EventsModel]

    getAllUsers:[UserModel]

    getUsersCountFromRandomCoffee: ID

    getAllAgeVariants: [AgesModel]
    getAllOccupationsVariants: [OccupationsModel]
    getAllHobbyVariants: [HobbiesModel]
    getAllPlacesVariants: [PlacesToVisitModel]

}

type Mutation {
    addMainBotInfo(mainBotInfo: MainBotInfoInput!): MainBotInfoModel

    addMenuInfo(menuInfo: MenuInfoInput!): MenuInfoModel
    updateMenuInfo(title: String!, menuInfo: MenuInfoInput!): Boolean
    deleteMenuInfoById(menuId: ID): Boolean

    addButton(button: ButtonInput!): ButtonModel
    updateButton(menuId: ID!, label: String!, button: ButtonInput!): Boolean
    deleteButton(menuId: ID!, label: String!): Boolean

    addRemindDate(remindDate: RemindDatesInput!): RemindDatesModel

    addEvent(eventModel: EventsInput!): EventsModel
    deleteEvent(eventId: Int!): Boolean
    updateEvent(oldEventDate: String!, event: EventsInput!):Boolean

    addRandomCoffeeModel(randomCoffee: RandomCoffeeModelInput!): RandomCoffeeModel
    updateRandomCoffeeModel(randomCoffee: RandomCoffeeModelInput!): Boolean
    deleteRandomCoffeeModelById(idNote: ID!): Boolean

    createAgeVariant(ageVariant: AgesModelInput!): Boolean
    deleteAgeVariant(ageId: Int!): Boolean
    createOccupationsVariant(occupationsVariant: OccupationsModelInput!): Boolean
    deleteOccupationsVariant(occupationsId: Int!): Boolean
    createHobbyVariant(hobbyVariant: HobbiesModelInput!): Boolean
    deleteHobbyVariant(hobbyId: Int!): Boolean
    createPlaceVariant(placeVariant: PlacesToVisitModelInput!): Boolean
    deletePlaceVariant(placeId: Int!): Boolean


}

type MenuInfoModel {
    menuId: Int
    description: String
    parentId: Int
    dateCreated: String
}

type MainBotInfoModel{
    idInfo: Int
    key: String
    value: String
}

type UserModel{
     userId: ID
     telegramId: ID
     username: String
     dateCreated: String
     reminders: String
}

type ButtonModel{
    buttonId: Int
    menuId: Int
    label: String
    actionType: String
    actionData: String
    dateCreated: String
    position: Int
}

type RemindDatesModel{
    id: Int
    description: String
    eventId: ID
    remindDate: String
    dateCreated: String
}

type EventsModel {
    eventId: Int
    eventDate: String
    eventDateText: String
    dateCreated: String
    googleFormUrl: String
}

type RandomCoffeeModel {
     idNote: ID
     userId: ID
     username: String
     age: String
     occupation: String
     hobby: String
     wouldLikeToVisit: String
     dateCreated: String
}

type AgesModel {
    ageId: Int
    ageRange: String
    freshStatus: Boolean
}

type OccupationsModel {
    occupationId: Int
    occupation: String
    freshStatus: Boolean
}

type HobbiesModel {
    hobbyId: Int
    hobby: String
    freshStatus: Boolean
}

type PlacesToVisitModel {
    placeId: Int
    place: String
    freshStatus: Boolean
}

input AgesModelInput {
    ageId: Int
    ageRange: String
    freshStatus: Boolean
}

input OccupationsModelInput {
    occupationId: Int
    occupation: String
    freshStatus: Boolean
}

input HobbiesModelInput {
    hobbyId: Int
    hobby: String
    freshStatus: Boolean
}

input PlacesToVisitModelInput {
    placeId: Int
    place: String
    freshStatus: Boolean
}

input MainBotInfoInput{
    idInfo: Int
    key: String
    value: String
}

input MenuInfoInput{
    menuId: Int
    description: String
    parentId: Int
}

input ButtonInput{
    buttonId: Int
    menuId: Int
    label: String
    actionType: String
    actionData: String
    position: Int
}

input RemindDatesInput{
    id: Int
    description: String
    eventId: ID
    remindDate: String
}

input EventsInput {
    eventId: Int
    eventDate: String
    eventDateText: String
    dateCreated: String
    googleFormUrl: String
}

input RandomCoffeeModelInput {
    idNote: ID
    userId: ID
    username: String
    age: String
    occupation: String
    hobby: String
    wouldLikeToVisit: String
}